import re
import logging
import pytesseract
import cv2
import numpy as np
from io import BytesIO
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def enhance_image(image):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    gray = cv2.convertScaleAbs(gray, alpha=1.5, beta=40)
    
    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞
    gray = cv2.medianBlur(gray, 3)
    
    return gray

def extract_passport_data(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω –¥–ª—è –º–∞—à–∏–Ω–æ—Å—á–∏—Ç—ã–≤–∞–µ–º–æ–π –∑–æ–Ω—ã
        r'([A-Z0-9<]+)\s+([A-Z0-9<]+)\s+([A-Z0-9<]+).*?([A-Z]{3})\s+(\d{2}[A-Z]{3}\d{2})\s+([FM])\s+(\d{2}[A-Z]{3}\d{2})\s+([A-Z<]+)\s+([A-Z<]+)',
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–±–µ–ª–æ–≤
        r'([A-Z0-9<]+)([A-Z0-9<]+)([A-Z0-9<]+).*?([A-Z]{3})(\d{2}[A-Z]{3}\d{2})([FM])(\d{2}[A-Z]{3}\d{2})([A-Z<]+)([A-Z<]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match
    return None

def start(update: Update, context: CallbackContext):
    help_text = (
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –§–û–¢–û –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –ø–∞—Å–ø–æ—Ä—Ç–∞. –Ø –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç AMADEUS.\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n"
        "- –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        "- –ß–µ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç\n"
        "- –¢–æ–ª—å–∫–æ –º–∞—à–∏–Ω–æ—Å—á–∏—Ç—ã–≤–∞–µ–º–∞—è –∑–æ–Ω–∞ (2 —Å—Ç—Ä–æ–∫–∏)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "P<UZBFA0421711<1111111M1111111<<<<<<<<<<<<<<<0\n"
        "IBRAGIMOVA<<BARNO<BAKTIYAROVNA<<<<<<<<<<<<<<"
    )
    update.message.reply_text(help_text)

def process_photo(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = update.message.photo[-1].get_file()
        img_bytes = BytesIO()
        photo_file.download(out=img_bytes)
        img_bytes.seek(0)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
        image = Image.open(img_bytes)
        img_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processed_img = enhance_image(img_cv)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(
            processed_img,
            lang='eng+rus',
            config='--psm 6 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789< '
        )
        
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")
        
        if not text:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ")

        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
        passport_data = extract_passport_data(text.replace('\n', ' '))
        
        if not passport_data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ")
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Amadeus
        country = passport_data.group(2)
        passport_num = passport_data.group(3)
        birth_date = passport_data.group(5)
        gender = passport_data.group(6)
        expiry_date = passport_data.group(7)
        last_name = passport_data.group(8).replace('<', '')
        first_name = passport_data.group(9).replace('<', ' ').strip()

        result = (
            f"SR DOCS YY HK1-P-{country}-{passport_num}-"
            f"{country}-{birth_date}-{gender}-"
            f"{expiry_date}-{last_name}-{first_name}"
        )
        
        update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ:\n\n`{result}`", parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        
        error_help = (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ\n"
            "2. –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ 2 —Å—Ç—Ä–æ–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
            "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ:\n"
            "P<UZBFA0421711<1111111M1111111<<<<<<<<<<<<<<<0\n"
            "IBRAGIMOVA<<BARNO<BAKTIYAROVNA<<<<<<<<<<<<<<"
        )
        
        update.message.reply_text(error_help)

def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}")
    if update.message:
        update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    updater = Updater("YOUR_TELEGRAM_TOKEN", use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.photo, process_photo))
    dp.add_error_handler(error_handler)

    updater.start_polling()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()

if __name__ == '__main__':
    main()
