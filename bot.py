import re
import logging
import pytesseract
import cv2
import numpy as np
from io import BytesIO
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def enhance_image(image):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
    gray = cv2.medianBlur(gray, 3)
    return gray

def extract_passport_data(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏"""
    patterns = [
        r'([A-Z0-9<]+)\s+([A-Z0-9<]+)\s+([A-Z0-9<]+).*?([A-Z]{3})\s+(\d{2}[A-Z]{3}\d{2})\s+([FM])\s+(\d{2}[A-Z]{3}\d{2})\s+([A-Z<]+)\s+([A-Z<]+)',
        r'([A-Z0-9<]+)([A-Z0-9<]+)([A-Z0-9<]+).*?([A-Z]{3})(\d{2}[A-Z]{3}\d{2})([FM])(\d{2}[A-Z]{3}\d{2})([A-Z<]+)([A-Z<]+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text.replace('\n', ' '))
        if match:
            return match
    return None

def start(update: Update, context: CallbackContext):
    help_text = (
        "üõÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –º–∞—à–∏–Ω–æ—Å—á–∏—Ç—ã–≤–∞–µ–º–æ–π –∑–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ:\n"
        "P<UZBFA0421711<1111111M1111111<<<<<<<<<<<<<<<0\n"
        "IBRAGIMOVA<<BARNO<BAKTIYAROVNA<<<<<<<<<<<<<<\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        -"–ß–µ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç\n"
        -"–¢–æ–ª—å–∫–æ 2 —Å—Ç—Ä–æ–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"
    )
    update.message.reply_text(help_text)

def process_photo(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = update.message.photo[-1].get_file()
        img_bytes = BytesIO()
        photo_file.download(out=img_bytes)
        img_bytes.seek(0)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(img_bytes)
        img_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
        processed_img = enhance_image(img_cv)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text = pytesseract.image_to_string(
            processed_img, 
            lang='eng+rus',
            config='--psm 6 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<'
        )
        
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        
        if not text:
            raise ValueError("–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = extract_passport_data(text)
        if not data:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = (
            f"SR DOCS YY HK1-P-{data.group(2)}-{data.group(3)}-"
            f"{data.group(4)}-{data.group(5)}-{data.group(6)}-"
            f"{data.group(7)}-{data.group(8).replace('<', '')}-"
            f"{data.group(9).replace('<', ' ').strip()}"
        )
        
        update.message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n`{result}`", parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ–µ\n"
            "2. –í–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ 2 —Å—Ç—Ä–æ–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
            "3. –ù–µ—Ç –±–ª–∏–∫–æ–≤ –∏ —Ç–µ–Ω–µ–π\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
        )

def main():
    updater = Updater("7921805686:AAH0AJrCC0Dd6Lvb5mc3CXI9dUda_n89Y0Y", use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.photo, process_photo))

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    updater.idle()

if __name__ == '__main__':
    main()
