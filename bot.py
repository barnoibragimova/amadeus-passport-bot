import re
import logging
import pytesseract
import cv2
import numpy as np
from io import BytesIO
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
PASSPORT_PATTERNS = [
    re.compile(r'([A-Z0-9<]+)\s*([A-Z0-9<]+)\s*([A-Z0-9<]+).*?([A-Z]{2,3})\s*(\d{2}[A-Z]{3}\d{2})\s*([FM])\s*(\d{2}[A-Z]{3}\d{2})\s*([A-Z<]+)\s*([A-Z<]+)'),
    re.compile(r'([A-Z0-9<]+)([A-Z0-9<]+)([A-Z0-9<]+).*?([A-Z]{2,3})(\d{2}[A-Z]{3}\d{2})([FM])(\d{2}[A-Z]{3}\d{2})([A-Z<]+)([A-Z<]+)'),
    re.compile(r'([A-Z]{1}[A-Z0-9<]{1,9})\s*([A-Z0-9<]{1,9})\s*([A-Z0-9<]{1,14}).*?([A-Z]{2,3})\s*(\d{2}[A-Z]{3}\d{2})\s*([FM])\s*(\d{2}[A-Z]{3}\d{2})\s*([A-Z<]{1,28})\s*([A-Z<]+)')
]

def preprocess_image(image_bytes):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        img_array = np.frombuffer(image_bytes.getvalue(), dtype=np.uint8)
        img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        gray = cv2.convertScaleAbs(gray, alpha=1.5, beta=40)
        
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞
        gray = cv2.medianBlur(gray, 3)
        
        return gray
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        raise ValueError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def extract_passport_data(text):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    clean_text = text.replace('\n', ' ').replace('  ', ' ')
    
    for pattern in PASSPORT_PATTERNS:
        match = pattern.search(clean_text)
        if match:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            if (len(match.group(5)) == 7 and len(match.group(7)) == 7:
                return match
    
    logger.warning(f"–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {clean_text}")
    return None

def format_amadeus(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è Amadeus"""
    try:
        return (
            f"SR DOCS YY HK1-P-{data.group(2)}-{data.group(3)}-"
            f"{data.group(4)}-{data.group(5)}-{data.group(6)}-"
            f"{data.group(7)}-{data.group(8).replace('<', '')}-"
            f"{data.group(9).replace('<', ' ').strip()}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        raise ValueError("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

async def process_photo(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        img_bytes = BytesIO()
        await photo_file.download(out=img_bytes)
        img_bytes.seek(0)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processed_img = preprocess_image(img_bytes)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        text = ""
        for config in ['--psm 6', '--psm 11']:
            text = pytesseract.image_to_string(
                processed_img,
                lang='eng+rus',
                config=f'{config} -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<'
            )
            if any(c.isalpha() for c in text):
                break
        
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
        
        if not any(c.isalpha() for c in text):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = extract_passport_data(text)
        if not data:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = format_amadeus(data)
        
        await update.message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n`{result}`", parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            with open("last_error_photo.jpg", "wb") as f:
                f.write(img_bytes.getvalue())
        except:
            pass
        
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û 2 —Å—Ç—Ä–æ–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
            "2. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º\n"
            "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ:\n"
            "P<UZBFA0421711<1111111M1111111<<<<<<<<<<<<<<<0\n"
            "IBRAGIMOVA<<BARNO<BAKTIYAROVNA<<<<<<<<<<<<<<\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
        )

async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –¢–û–õ–¨–ö–û 2 —Å—Ç—Ä–æ–∫–∏ –º–∞—à–∏–Ω–æ—Å—á–∏—Ç—ã–≤–∞–µ–º–æ–π –∑–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
        "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
        "   - –í–µ—Å—å —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n"
        "   - –ù–µ—Ç –±–ª–∏–∫–æ–≤ –∏ —Ç–µ–Ω–µ–π\n"
        "   - –§–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä—è–º–æ, –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–∞\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É\n\n"
        "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ:\n"
        "P<UZBFA0421711<1111111M1111111<<<<<<<<<<<<<<<0\n"
        "IBRAGIMOVA<<BARNO<BAKTIYAROVNA<<<<<<<<<<<<<<\n\n"
        "–ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        "- –ü–µ—Ä–µ—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –¥—Ä—É–≥–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
        -"–û–±—Ä–µ–∑–∞—Ç—å –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏ —Ñ–æ—Ç–æ\n"
        -"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑"
    )
    await update.message.reply_text(help_text)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
    application = Updater("7921805686:AAH0AJrCC0Dd6Lvb5mc3CXI9dUda_n89Y0Y")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", help_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(Filters.PHOTO, process_photo))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    application.idle()

if __name__ == '__main__':
    main()
