import re
import logging
import pytesseract
import cv2
import numpy as np
from io import BytesIO
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –®–∞–±–ª–æ–Ω—ã –¥–ª—è —É–∑–±–µ–∫—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
UZ_PASSPORT_PATTERNS = [
    re.compile(r'P<([A-Z]{3})([A-Z<]+)<<([A-Z<]+)<([A-Z<]+)<<*'),
    re.compile(r'([A-Z0-9<]{9})([0-9]{1})([A-Z]{3})([0-9]{6})([MF])([0-9]{6})')
]

def find_mrz_zone(image):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–∞—à–∏–Ω–æ—Å—á–∏—Ç—ã–≤–∞–µ–º–æ–π –∑–æ–Ω—ã"""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    # –ò—â–µ–º –∫–æ–Ω—Ç—É—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
    contours, _ = cv2.findContours(binary, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    
    for cnt in sorted(contours, key=cv2.contourArea, reverse=True)[:5]:
        x, y, w, h = cv2.boundingRect(cnt)
        roi = image[y:y+h, x:x+w]
        text = pytesseract.image_to_string(roi, config='--psm 6')
        
        if "P<" in text and len(text.split('\n')) >= 2:
            return roi
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return image[-150:]

def preprocess_for_mrz(image):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è MRZ"""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (3, 3), 0)
    gray = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
    return gray

def parse_uzbek_passport(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ specifically –¥–ª—è —É–∑–±–µ–∫—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤"""
    lines = [line for line in text.split('\n') if len(line) > 10]
    
    if len(lines) < 2:
        return None
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ MRZ
    line1 = lines[0].replace(' ', '')
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ MRZ
    line2 = lines[1].replace(' ', '')
    
    # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    m1 = UZ_PASSPORT_PATTERNS[0].search(line1)
    if not m1:
        return None
    
    # –ü–∞—Ä—Å–∏–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É
    m2 = UZ_PASSPORT_PATTERNS[1].search(line2)
    if not m2:
        return None
    
    return {
        'country_code': m1.group(1),
        'surname': m1.group(2).replace('<', ' ').strip(),
        'given_names': m1.group(3).replace('<', ' ').strip(),
        'passport_number': m2.group(1),
        'birth_date': f"{m2.group(4)[4:6]}{m2.group(4)[2:4]}{m2.group(4)[0:2]}",
        'sex': 'F' if m2.group(5) == 'F' else 'M',
        'expiry_date': f"{m2.group(6)[4:6]}{m2.group(6)[2:4]}{m2.group(6)[0:2]}"
    }

async def process_photo(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        img_bytes = BytesIO()
        await photo_file.download(out=img_bytes)
        img_bytes.seek(0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
        img_array = np.frombuffer(img_bytes.getvalue(), dtype=np.uint8)
        img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
        
        # –ù–∞—Ö–æ–¥–∏–º MRZ –∑–æ–Ω—É
        mrz_zone = find_mrz_zone(img)
        processed = preprocess_for_mrz(mrz_zone)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(
            processed,
            lang='eng',
            config='--psm 6 -c tessedit_char_whitelist=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<'
        )
        
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π MRZ:\n{text}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = parse_uzbek_passport(text)
        if not data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Amadeus
        result = (
            f"SR DOCS YY HK1-P-{data['country_code']}-{data['passport_number']}-"
            f"{data['country_code']}-{data['birth_date']}-{data['sex']}-"
            f"{data['expiry_date']}-{data['surname']}-{data['given_names']}"
        )
        
        await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n\n`{result}`", parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å 2 —Å—Ç—Ä–æ–∫–∞–º–∏\n"
            "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ:\n"
            "P<UZBANVARJONOV<<BOBURJON<SARVAROVICH<<<<<<<<\n"
            "FB11488013UZB1505122M30052135120515657003468"
        )

async def send_instructions(update: Update, context: CallbackContext):
    instructions = (
        "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —É–∑–±–µ–∫—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤:\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ç–æ\n"
        "2. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å —Å 2 —Å—Ç—Ä–æ–∫–∞–º–∏\n"
        "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–∏–π –∏ –Ω–µ –æ–±—Ä–µ–∑–∞–Ω\n\n"
        "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ:\n"
        "P<UZBANVARJONOV<<BOBURJON<SARVAROVICH<<<<<<<<\n"
        "FB11488013UZB1505122M30052135120515657003468\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å–µ–π—á–∞—Å"
    )
    await update.message.reply_text(instructions)

def main():
    application = Updater("7921805686:AAH0AJrCC0Dd6Lvb5mc3CXI9dUda_n89Y0Y")
    
    application.add_handler(CommandHandler("start", send_instructions))
    application.add_handler(CommandHandler("help", send_instructions))
    application.add_handler(MessageHandler(Filters.photo, process_photo))
    
    application.start_polling()
    logger.info("–ë–æ—Ç –¥–ª—è —É–∑–±–µ–∫—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
    application.idle()

if __name__ == '__main__':
    main()
