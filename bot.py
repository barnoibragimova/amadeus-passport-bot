import os
import re
import cv2
import pytesseract
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.error import Conflict

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7921805686:AAH0AJrCC0Dd6Lvb5mc3CXI9dUda_n89Y0Y"
TESSERACT_CONFIG = r'--oem 3 --psm 6 -l eng+rus'

async def enhance_image(image_path):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        img = cv2.imread(image_path)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        return cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
    except Exception as e:
        print(f"Image enhancement failed: {e}")
        return None

async def extract_text(image_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        processed_img = await enhance_image(image_path)
        if processed_img is None:
            return None
        return pytesseract.image_to_string(processed_img, config=TESSERACT_CONFIG)
    except Exception as e:
        print(f"Text extraction failed: {e}")
        return None

def parse_passport_data(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    if not text:
        return None
        
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    if len(lines) < 2:
        return None
        
    return {
        'line1': lines[-2],
        'line2': lines[-1]
    }

def generate_amadeus_format(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ Amadeus"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–∏–º–µ—Ä: "UZB FA0421711 UZB 29NOV86 F")
        parts1 = re.split(r'\s+', data['line1'])
        country = parts1[0] if len(parts1) > 0 else "UZB"
        dob = parts1[3] if len(parts1) > 3 else "01JAN00"
        gender = parts1[4] if len(parts1) > 4 else "F"

        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–∏–º–µ—Ä: "02JUL29 IBragimova Barno")
        parts2 = re.split(r'\s+', data['line2'], maxsplit=2)
        expiry = parts2[0] if len(parts2) > 0 else "01JAN30"
        surname = parts2[1] if len(parts2) > 1 else "SURNAME"
        given_name = parts2[2] if len(parts2) > 2 else "NAME"

        return (
            f"SR DOCS YY HK1-P-{country}-FA0421711-"
            f"{country}-{dob}-{gender}-{expiry}-"
            f"{surname.upper()}-{given_name.upper()}"
        )
    except Exception as e:
        print(f"Amadeus formatting failed: {e}")
        return None

async def handle_passport_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞"""
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        temp_image = "temp_passport.jpg"
        await photo_file.download_to_drive(temp_image)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text = await extract_text(temp_image)
        if not text:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return
            
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        passport_data = parse_passport_data(text)
        if not passport_data:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏.")
            return
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ Amadeus
        amadeus_format = generate_amadeus_format(passport_data)
        if not amadeus_format:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n\n"
            f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{passport_data['line1']}\n{passport_data['line2']}\n\n"
            f"üîπ –§–æ—Ä–º–∞—Ç Amadeus:\n{amadeus_format}"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(temp_image):
            os.remove(temp_image)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.PHOTO, handle_passport_photo))
    
    print("–ë–æ—Ç @Amadeus2bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        await app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False  # –í–∞–∂–Ω–æ –¥–ª—è Render
        )
    except Conflict as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
